//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""General Input"",
            ""id"": ""b4c24f56-48a2-490d-8186-bc843d0a4594"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e26d9840-4d18-44ec-91c7-a94d1fcb5412"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle Character Sheet"",
                    ""type"": ""Button"",
                    ""id"": ""0382bc1c-638d-4b07-9485-187bbe4ff4eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c96d8b8d-e349-4303-998e-5fcb514db9c8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5e7f343c-e7cf-4296-90db-427adb97fcf8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultInputs"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b196c34c-b2a3-459c-b425-3506b23e0f97"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultInputs"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""36c7aa0a-b280-4eca-9525-5a6083b552b9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultInputs"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""108f1cf5-7947-4687-8691-3288f28c4b24"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultInputs"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40671a30-1a15-45d3-935a-8753024d615b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Character Sheet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultInputs"",
            ""bindingGroup"": ""DefaultInputs"",
            ""devices"": []
        }
    ]
}");
        // General Input
        m_GeneralInput = asset.FindActionMap("General Input", throwIfNotFound: true);
        m_GeneralInput_Move = m_GeneralInput.FindAction("Move", throwIfNotFound: true);
        m_GeneralInput_ToggleCharacterSheet = m_GeneralInput.FindAction("Toggle Character Sheet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General Input
    private readonly InputActionMap m_GeneralInput;
    private IGeneralInputActions m_GeneralInputActionsCallbackInterface;
    private readonly InputAction m_GeneralInput_Move;
    private readonly InputAction m_GeneralInput_ToggleCharacterSheet;
    public struct GeneralInputActions
    {
        private @PlayerInputs m_Wrapper;
        public GeneralInputActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GeneralInput_Move;
        public InputAction @ToggleCharacterSheet => m_Wrapper.m_GeneralInput_ToggleCharacterSheet;
        public InputActionMap Get() { return m_Wrapper.m_GeneralInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralInputActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralInputActions instance)
        {
            if (m_Wrapper.m_GeneralInputActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GeneralInputActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GeneralInputActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GeneralInputActionsCallbackInterface.OnMove;
                @ToggleCharacterSheet.started -= m_Wrapper.m_GeneralInputActionsCallbackInterface.OnToggleCharacterSheet;
                @ToggleCharacterSheet.performed -= m_Wrapper.m_GeneralInputActionsCallbackInterface.OnToggleCharacterSheet;
                @ToggleCharacterSheet.canceled -= m_Wrapper.m_GeneralInputActionsCallbackInterface.OnToggleCharacterSheet;
            }
            m_Wrapper.m_GeneralInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @ToggleCharacterSheet.started += instance.OnToggleCharacterSheet;
                @ToggleCharacterSheet.performed += instance.OnToggleCharacterSheet;
                @ToggleCharacterSheet.canceled += instance.OnToggleCharacterSheet;
            }
        }
    }
    public GeneralInputActions @GeneralInput => new GeneralInputActions(this);
    private int m_DefaultInputsSchemeIndex = -1;
    public InputControlScheme DefaultInputsScheme
    {
        get
        {
            if (m_DefaultInputsSchemeIndex == -1) m_DefaultInputsSchemeIndex = asset.FindControlSchemeIndex("DefaultInputs");
            return asset.controlSchemes[m_DefaultInputsSchemeIndex];
        }
    }
    public interface IGeneralInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnToggleCharacterSheet(InputAction.CallbackContext context);
    }
}
